package com.yutian.base.database.srcgen;

import android.database.Cursor;
import android.database.sqlite.SQLiteDatabase;
import android.database.sqlite.SQLiteStatement;

import com.yutian.base.util.DateUtil;

import de.greenrobot.dao.AbstractDao;
import de.greenrobot.dao.Property;
import de.greenrobot.dao.internal.DaoConfig;


// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/**
 * DAO for table "SSQTIMEINFOR".
*/
public class SSQTIMEINFORDao extends AbstractDao<SSQTIMEINFOR, String> {

    public static final String TABLENAME = "SSQTIMEINFOR";

    /**
     * Properties of entity SSQTIMEINFOR.<br/>
     * Can be used for QueryBuilder and for referencing column names.
    */
    public static class Properties {
        public final static Property PERIOD = new Property(0, String.class, "PERIOD", true, "PERIOD");
        public final static Property LOTTERYTIME = new Property(1, java.util.Date.class, "LOTTERYTIME", false, "LOTTERYTIME");
        public final static Property ENDTIME = new Property(2, java.util.Date.class, "ENDTIME", false, "ENDTIME");
        public final static Property PERIODSELL = new Property(3, String.class, "PERIODSELL", false, "PERIODSELL");
        public final static Property CURRENPOOL = new Property(4, String.class, "CURRENPOOL", false, "CURRENPOOL");
    };


    public SSQTIMEINFORDao(DaoConfig config) {
        super(config);
    }
    
    public SSQTIMEINFORDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(SQLiteDatabase db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "\"SSQTIMEINFOR\" (" + //
                "\"PERIOD\" TEXT PRIMARY KEY NOT NULL ," + // 0: PERIOD
                "\"LOTTERYTIME\" DATE," + // 1: LOTTERYTIME
                "\"ENDTIME\" DATE," + // 2: ENDTIME
                "\"PERIODSELL\" TEXT," + // 3: PERIODSELL
                "\"CURRENPOOL\" TEXT);"); // 4: CURRENPOOL
    }

    /** Drops the underlying database table. */
    public static void dropTable(SQLiteDatabase db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"SSQTIMEINFOR\"";
        db.execSQL(sql);
    }

    /** @inheritdoc */
    @Override
    protected void bindValues(SQLiteStatement stmt, SSQTIMEINFOR entity) {
        stmt.clearBindings();
 
        String PERIOD = entity.getPERIOD();
        if (PERIOD != null) {
            stmt.bindString(1, PERIOD);
        }
 
        java.util.Date LOTTERYTIME = entity.getLOTTERYTIME();
        if (LOTTERYTIME != null) {
            stmt.bindString(2, DateUtil.formatDBDate(LOTTERYTIME));
        }
 
        java.util.Date ENDTIME = entity.getENDTIME();
        if (ENDTIME != null) {
            stmt.bindString(3, DateUtil.formatDBDate(ENDTIME));
        }
 
        String PERIODSELL = entity.getPERIODSELL();
        if (PERIODSELL != null) {
            stmt.bindString(4, PERIODSELL);
        }
 
        String CURRENPOOL = entity.getCURRENPOOL();
        if (CURRENPOOL != null) {
            stmt.bindString(5, CURRENPOOL);
        }
    }

    /** @inheritdoc */
    @Override
    public String readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 0) ? null : cursor.getString(offset + 0);
    }    

    /** @inheritdoc */
    @Override
    public SSQTIMEINFOR readEntity(Cursor cursor, int offset) {
        SSQTIMEINFOR entity = new SSQTIMEINFOR( //
            cursor.isNull(offset + 0) ? null : cursor.getString(offset + 0), // PERIOD
            cursor.isNull(offset + 1) ? null : DateUtil.pareseDBDate(cursor.getString(offset + 1)), // LOTTERYTIME
            cursor.isNull(offset + 2) ? null : DateUtil.pareseDBDate(cursor.getString(offset + 2)), // ENDTIME
            cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3), // PERIODSELL
            cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4) // CURRENPOOL
        );
        return entity;
    }
     
    /** @inheritdoc */
    @Override
    public void readEntity(Cursor cursor, SSQTIMEINFOR entity, int offset) {
        entity.setPERIOD(cursor.isNull(offset + 0) ? null : cursor.getString(offset + 0));
        entity.setLOTTERYTIME(cursor.isNull(offset + 1) ? null : DateUtil.pareseDBDate(cursor.getString(offset + 1)));
        entity.setENDTIME(cursor.isNull(offset + 2) ? null : DateUtil.pareseDBDate(cursor.getString(offset + 2)));
        entity.setPERIODSELL(cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3));
        entity.setCURRENPOOL(cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4));
     }
    
    /** @inheritdoc */
    @Override
    protected String updateKeyAfterInsert(SSQTIMEINFOR entity, long rowId) {
        return entity.getPERIOD();
    }
    
    /** @inheritdoc */
    @Override
    public String getKey(SSQTIMEINFOR entity) {
        if(entity != null) {
            return entity.getPERIOD();
        } else {
            return null;
        }
    }

    /** @inheritdoc */
    @Override    
    protected boolean isEntityUpdateable() {
        return true;
    }
    
}
