package com.yutian.base.database.srcgen;

import android.database.Cursor;
import android.database.sqlite.SQLiteDatabase;
import android.database.sqlite.SQLiteStatement;

import de.greenrobot.dao.AbstractDao;
import de.greenrobot.dao.Property;
import de.greenrobot.dao.internal.DaoConfig;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table "MYSSQDATA".
*/
public class MYSSQDATADao extends AbstractDao<MYSSQDATA, Void> {

    public static final String TABLENAME = "MYSSQDATA";

    /**
     * Properties of entity MYSSQDATA.<br/>
     * Can be used for QueryBuilder and for referencing column names.
    */
    public static class Properties {
        public final static Property ID = new Property(0, String.class, "ID", true, "ID");
        public final static Property NUMBER = new Property(1, Integer.class, "NUMBER", true, "NUMBER");
        public final static Property RED1 = new Property(2, String.class, "RED1", false, "RED1");
        public final static Property RED2 = new Property(3, String.class, "RED2", false, "RED2");
        public final static Property RED3 = new Property(4, String.class, "RED3", false, "RED3");
        public final static Property RED4 = new Property(5, String.class, "RED4", false, "RED4");
        public final static Property RED5 = new Property(6, String.class, "RED5", false, "RED5");
        public final static Property RED6 = new Property(7, String.class, "RED6", false, "RED6");
        public final static Property BLUE = new Property(8, String.class, "BLUE", false, "BLUE");
        public final static Property REDBALL = new Property(9, String.class, "REDBALL", false, "REDBALL");
        public final static Property BLUEBALL = new Property(10, String.class, "BLUEBALL", false, "BLUEBALL");
        public final static Property COUNT = new Property(11, Integer.class, "COUNT", false, "COUNT");
    };


    public MYSSQDATADao(DaoConfig config) {
        super(config);
    }
    
    public MYSSQDATADao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(SQLiteDatabase db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "\"MYSSQDATA\" (" + //
                "\"ID\" TEXT PRIMARY KEY NOT NULL ," + // 0: ID
                "\"NUMBER\" INTEGER PRIMARY KEY ," + // 1: NUMBER
                "\"RED1\" TEXT," + // 2: RED1
                "\"RED2\" TEXT," + // 3: RED2
                "\"RED3\" TEXT," + // 4: RED3
                "\"RED4\" TEXT," + // 5: RED4
                "\"RED5\" TEXT," + // 6: RED5
                "\"RED6\" TEXT," + // 7: RED6
                "\"BLUE\" TEXT," + // 8: BLUE
                "\"REDBALL\" TEXT," + // 9: REDBALL
                "\"BLUEBALL\" TEXT," + // 10: BLUEBALL
                "\"COUNT\" INTEGER);"); // 11: COUNT
    }

    /** Drops the underlying database table. */
    public static void dropTable(SQLiteDatabase db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"MYSSQDATA\"";
        db.execSQL(sql);
    }

    /** @inheritdoc */
    @Override
    protected void bindValues(SQLiteStatement stmt, MYSSQDATA entity) {
        stmt.clearBindings();
 
        String ID = entity.getID();
        if (ID != null) {
            stmt.bindString(1, ID);
        }
 
        Integer NUMBER = entity.getNUMBER();
        if (NUMBER != null) {
            stmt.bindLong(2, NUMBER);
        }
 
        String RED1 = entity.getRED1();
        if (RED1 != null) {
            stmt.bindString(3, RED1);
        }
 
        String RED2 = entity.getRED2();
        if (RED2 != null) {
            stmt.bindString(4, RED2);
        }
 
        String RED3 = entity.getRED3();
        if (RED3 != null) {
            stmt.bindString(5, RED3);
        }
 
        String RED4 = entity.getRED4();
        if (RED4 != null) {
            stmt.bindString(6, RED4);
        }
 
        String RED5 = entity.getRED5();
        if (RED5 != null) {
            stmt.bindString(7, RED5);
        }
 
        String RED6 = entity.getRED6();
        if (RED6 != null) {
            stmt.bindString(8, RED6);
        }
 
        String BLUE = entity.getBLUE();
        if (BLUE != null) {
            stmt.bindString(9, BLUE);
        }
 
        String REDBALL = entity.getREDBALL();
        if (REDBALL != null) {
            stmt.bindString(10, REDBALL);
        }
 
        String BLUEBALL = entity.getBLUEBALL();
        if (BLUEBALL != null) {
            stmt.bindString(11, BLUEBALL);
        }
 
        Integer COUNT = entity.getCOUNT();
        if (COUNT != null) {
            stmt.bindLong(12, COUNT);
        }
    }

    /** @inheritdoc */
    @Override
    public Void readKey(Cursor cursor, int offset) {
        return null;
    }    

    /** @inheritdoc */
    @Override
    public MYSSQDATA readEntity(Cursor cursor, int offset) {
        MYSSQDATA entity = new MYSSQDATA( //
            cursor.isNull(offset + 0) ? null : cursor.getString(offset + 0), // ID
            cursor.isNull(offset + 1) ? null : cursor.getInt(offset + 1), // NUMBER
            cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2), // RED1
            cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3), // RED2
            cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4), // RED3
            cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5), // RED4
            cursor.isNull(offset + 6) ? null : cursor.getString(offset + 6), // RED5
            cursor.isNull(offset + 7) ? null : cursor.getString(offset + 7), // RED6
            cursor.isNull(offset + 8) ? null : cursor.getString(offset + 8), // BLUE
            cursor.isNull(offset + 9) ? null : cursor.getString(offset + 9), // REDBALL
            cursor.isNull(offset + 10) ? null : cursor.getString(offset + 10), // BLUEBALL
            cursor.isNull(offset + 11) ? null : cursor.getInt(offset + 11) // COUNT
        );
        return entity;
    }
     
    /** @inheritdoc */
    @Override
    public void readEntity(Cursor cursor, MYSSQDATA entity, int offset) {
        entity.setID(cursor.isNull(offset + 0) ? null : cursor.getString(offset + 0));
        entity.setNUMBER(cursor.isNull(offset + 1) ? null : cursor.getInt(offset + 1));
        entity.setRED1(cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2));
        entity.setRED2(cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3));
        entity.setRED3(cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4));
        entity.setRED4(cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5));
        entity.setRED5(cursor.isNull(offset + 6) ? null : cursor.getString(offset + 6));
        entity.setRED6(cursor.isNull(offset + 7) ? null : cursor.getString(offset + 7));
        entity.setBLUE(cursor.isNull(offset + 8) ? null : cursor.getString(offset + 8));
        entity.setREDBALL(cursor.isNull(offset + 9) ? null : cursor.getString(offset + 9));
        entity.setBLUEBALL(cursor.isNull(offset + 10) ? null : cursor.getString(offset + 10));
        entity.setCOUNT(cursor.isNull(offset + 11) ? null : cursor.getInt(offset + 11));
     }
    
    /** @inheritdoc */
    @Override
    protected Void updateKeyAfterInsert(MYSSQDATA entity, long rowId) {
        // Unsupported or missing PK type
        return null;
    }
    
    /** @inheritdoc */
    @Override
    public Void getKey(MYSSQDATA entity) {
        return null;
    }

    /** @inheritdoc */
    @Override    
    protected boolean isEntityUpdateable() {
        return true;
    }
    
}
