package com.yutian.base.database.srcgen;

import android.database.Cursor;
import android.database.sqlite.SQLiteDatabase;
import android.database.sqlite.SQLiteStatement;

import de.greenrobot.dao.AbstractDao;
import de.greenrobot.dao.Property;
import de.greenrobot.dao.internal.DaoConfig;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table "MYBUY".
*/
public class MYBUYDao extends AbstractDao<MYBUY, Void> {

    public static final String TABLENAME = "MYBUY";

    /**
     * Properties of entity MYBUY.<br/>
     * Can be used for QueryBuilder and for referencing column names.
    */
    public static class Properties {
        public final static Property ID = new Property(0, String.class, "ID", true, "ID");
        public final static Property NUMBER = new Property(1, int.class, "NUMBER", false, "NUMBER");
        public final static Property ADDTIME = new Property(2, java.util.Date.class, "ADDTIME", false, "ADDTIME");
        public final static Property PERIOD = new Property(3, String.class, "PERIOD", true, "PERIOD");
    };


    public MYBUYDao(DaoConfig config) {
        super(config);
    }
    
    public MYBUYDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(SQLiteDatabase db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "\"MYBUY\" (" + //
                "\"ID\" TEXT PRIMARY KEY NOT NULL ," + // 0: ID
                "\"NUMBER\" INTEGER NOT NULL ," + // 1: NUMBER
                "\"ADDTIME\" INTEGER NOT NULL ," + // 2: ADDTIME
                "\"PERIOD\" TEXT PRIMARY KEY NOT NULL );"); // 3: PERIOD
    }

    /** Drops the underlying database table. */
    public static void dropTable(SQLiteDatabase db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"MYBUY\"";
        db.execSQL(sql);
    }

    /** @inheritdoc */
    @Override
    protected void bindValues(SQLiteStatement stmt, MYBUY entity) {
        stmt.clearBindings();
        stmt.bindString(1, entity.getID());
        stmt.bindLong(2, entity.getNUMBER());
        stmt.bindLong(3, entity.getADDTIME().getTime());
        stmt.bindString(4, entity.getPERIOD());
    }

    /** @inheritdoc */
    @Override
    public Void readKey(Cursor cursor, int offset) {
        return null;
    }    

    /** @inheritdoc */
    @Override
    public MYBUY readEntity(Cursor cursor, int offset) {
        MYBUY entity = new MYBUY( //
            cursor.getString(offset + 0), // ID
            cursor.getInt(offset + 1), // NUMBER
            new java.util.Date(cursor.getLong(offset + 2)), // ADDTIME
            cursor.getString(offset + 3) // PERIOD
        );
        return entity;
    }
     
    /** @inheritdoc */
    @Override
    public void readEntity(Cursor cursor, MYBUY entity, int offset) {
        entity.setID(cursor.getString(offset + 0));
        entity.setNUMBER(cursor.getInt(offset + 1));
        entity.setADDTIME(new java.util.Date(cursor.getLong(offset + 2)));
        entity.setPERIOD(cursor.getString(offset + 3));
     }
    
    /** @inheritdoc */
    @Override
    protected Void updateKeyAfterInsert(MYBUY entity, long rowId) {
        // Unsupported or missing PK type
        return null;
    }
    
    /** @inheritdoc */
    @Override
    public Void getKey(MYBUY entity) {
        return null;
    }

    /** @inheritdoc */
    @Override    
    protected boolean isEntityUpdateable() {
        return true;
    }
    
}
