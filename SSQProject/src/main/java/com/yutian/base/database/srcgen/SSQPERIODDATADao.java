package com.yutian.base.database.srcgen;

import android.database.Cursor;
import android.database.sqlite.SQLiteDatabase;
import android.database.sqlite.SQLiteStatement;

import de.greenrobot.dao.AbstractDao;
import de.greenrobot.dao.Property;
import de.greenrobot.dao.internal.DaoConfig;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table "SSQPERIODDATA".
*/
public class SSQPERIODDATADao extends AbstractDao<SSQPERIODDATA, String> {

    public static final String TABLENAME = "SSQPERIODDATA";

    /**
     * Properties of entity SSQPERIODDATA.<br/>
     * Can be used for QueryBuilder and for referencing column names.
    */
    public static class Properties {
        public final static Property PERIOD = new Property(0, String.class, "PERIOD", true, "PERIOD");
        public final static Property RED1 = new Property(1, String.class, "RED1", false, "RED1");
        public final static Property RED2 = new Property(2, String.class, "RED2", false, "RED2");
        public final static Property RED3 = new Property(3, String.class, "RED3", false, "RED3");
        public final static Property RED4 = new Property(4, String.class, "RED4", false, "RED4");
        public final static Property RED5 = new Property(5, String.class, "RED5", false, "RED5");
        public final static Property RED6 = new Property(6, String.class, "RED6", false, "RED6");
        public final static Property BLUE = new Property(7, String.class, "BLUE", false, "BLUE");
        public final static Property REDBALL = new Property(8, String.class, "REDBALL", false, "REDBALL");
        public final static Property SEQREDBALL = new Property(9, String.class, "SEQREDBALL", false, "SEQREDBALL");
    };


    public SSQPERIODDATADao(DaoConfig config) {
        super(config);
    }
    
    public SSQPERIODDATADao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(SQLiteDatabase db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "\"SSQPERIODDATA\" (" + //
                "\"PERIOD\" TEXT PRIMARY KEY NOT NULL ," + // 0: PERIOD
                "\"RED1\" TEXT," + // 1: RED1
                "\"RED2\" TEXT," + // 2: RED2
                "\"RED3\" TEXT," + // 3: RED3
                "\"RED4\" TEXT," + // 4: RED4
                "\"RED5\" TEXT," + // 5: RED5
                "\"RED6\" TEXT," + // 6: RED6
                "\"BLUE\" TEXT," + // 7: BLUE
                "\"REDBALL\" TEXT," + // 8: REDBALL
                "\"SEQREDBALL\" TEXT);"); // 9: SEQREDBALL
    }

    /** Drops the underlying database table. */
    public static void dropTable(SQLiteDatabase db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"SSQPERIODDATA\"";
        db.execSQL(sql);
    }

    /** @inheritdoc */
    @Override
    protected void bindValues(SQLiteStatement stmt, SSQPERIODDATA entity) {
        stmt.clearBindings();
 
        String PERIOD = entity.getPERIOD();
        if (PERIOD != null) {
            stmt.bindString(1, PERIOD);
        }
 
        String RED1 = entity.getRED1();
        if (RED1 != null) {
            stmt.bindString(2, RED1);
        }
 
        String RED2 = entity.getRED2();
        if (RED2 != null) {
            stmt.bindString(3, RED2);
        }
 
        String RED3 = entity.getRED3();
        if (RED3 != null) {
            stmt.bindString(4, RED3);
        }
 
        String RED4 = entity.getRED4();
        if (RED4 != null) {
            stmt.bindString(5, RED4);
        }
 
        String RED5 = entity.getRED5();
        if (RED5 != null) {
            stmt.bindString(6, RED5);
        }
 
        String RED6 = entity.getRED6();
        if (RED6 != null) {
            stmt.bindString(7, RED6);
        }
 
        String BLUE = entity.getBLUE();
        if (BLUE != null) {
            stmt.bindString(8, BLUE);
        }
 
        String REDBALL = entity.getREDBALL();
        if (REDBALL != null) {
            stmt.bindString(9, REDBALL);
        }
 
        String SEQREDBALL = entity.getSEQREDBALL();
        if (SEQREDBALL != null) {
            stmt.bindString(10, SEQREDBALL);
        }
    }

    /** @inheritdoc */
    @Override
    public String readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 0) ? null : cursor.getString(offset + 0);
    }    

    /** @inheritdoc */
    @Override
    public SSQPERIODDATA readEntity(Cursor cursor, int offset) {
        SSQPERIODDATA entity = new SSQPERIODDATA( //
            cursor.isNull(offset + 0) ? null : cursor.getString(offset + 0), // PERIOD
            cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1), // RED1
            cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2), // RED2
            cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3), // RED3
            cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4), // RED4
            cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5), // RED5
            cursor.isNull(offset + 6) ? null : cursor.getString(offset + 6), // RED6
            cursor.isNull(offset + 7) ? null : cursor.getString(offset + 7), // BLUE
            cursor.isNull(offset + 8) ? null : cursor.getString(offset + 8), // REDBALL
            cursor.isNull(offset + 9) ? null : cursor.getString(offset + 9) // SEQREDBALL
        );
        return entity;
    }
     
    /** @inheritdoc */
    @Override
    public void readEntity(Cursor cursor, SSQPERIODDATA entity, int offset) {
        entity.setPERIOD(cursor.isNull(offset + 0) ? null : cursor.getString(offset + 0));
        entity.setRED1(cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1));
        entity.setRED2(cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2));
        entity.setRED3(cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3));
        entity.setRED4(cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4));
        entity.setRED5(cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5));
        entity.setRED6(cursor.isNull(offset + 6) ? null : cursor.getString(offset + 6));
        entity.setBLUE(cursor.isNull(offset + 7) ? null : cursor.getString(offset + 7));
        entity.setREDBALL(cursor.isNull(offset + 8) ? null : cursor.getString(offset + 8));
        entity.setSEQREDBALL(cursor.isNull(offset + 9) ? null : cursor.getString(offset + 9));
     }
    
    /** @inheritdoc */
    @Override
    protected String updateKeyAfterInsert(SSQPERIODDATA entity, long rowId) {
        return entity.getPERIOD();
    }
    
    /** @inheritdoc */
    @Override
    public String getKey(SSQPERIODDATA entity) {
        if(entity != null) {
            return entity.getPERIOD();
        } else {
            return null;
        }
    }

    /** @inheritdoc */
    @Override    
    protected boolean isEntityUpdateable() {
        return true;
    }
    
}
