package com.yutian.base.database.srcgen;

import android.database.Cursor;
import android.database.sqlite.SQLiteDatabase;
import android.database.sqlite.SQLiteStatement;

import de.greenrobot.dao.AbstractDao;
import de.greenrobot.dao.Property;
import de.greenrobot.dao.internal.DaoConfig;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table "PRICELEVEL".
*/
public class PRICELEVELDao extends AbstractDao<PRICELEVEL, Integer> {

    public static final String TABLENAME = "PRICELEVEL";

    /**
     * Properties of entity PRICELEVEL.<br/>
     * Can be used for QueryBuilder and for referencing column names.
    */
    public static class Properties {
        public final static Property LEVEL = new Property(0, Integer.class, "LEVEL", true, "LEVEL");
        public final static Property NAME = new Property(1, String.class, "NAME", false, "NAME");
        public final static Property PRESETPRICE = new Property(2, String.class, "PRESETPRICE", false, "PRESETPRICE");
    };


    public PRICELEVELDao(DaoConfig config) {
        super(config);
    }
    
    public PRICELEVELDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(SQLiteDatabase db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "\"PRICELEVEL\" (" + //
                "\"LEVEL\" INTEGER PRIMARY KEY ," + // 0: LEVEL
                "\"NAME\" TEXT," + // 1: NAME
                "\"PRESETPRICE\" TEXT);"); // 2: PRESETPRICE
    }

    /** Drops the underlying database table. */
    public static void dropTable(SQLiteDatabase db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"PRICELEVEL\"";
        db.execSQL(sql);
    }

    /** @inheritdoc */
    @Override
    protected void bindValues(SQLiteStatement stmt, PRICELEVEL entity) {
        stmt.clearBindings();
 
        Integer LEVEL = entity.getLEVEL();
        if (LEVEL != null) {
            stmt.bindLong(1, LEVEL);
        }
 
        String NAME = entity.getNAME();
        if (NAME != null) {
            stmt.bindString(2, NAME);
        }
 
        String PRESETPRICE = entity.getPRESETPRICE();
        if (PRESETPRICE != null) {
            stmt.bindString(3, PRESETPRICE);
        }
    }

    /** @inheritdoc */
    @Override
    public Integer readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 0) ? null : cursor.getInt(offset + 0);
    }    

    /** @inheritdoc */
    @Override
    public PRICELEVEL readEntity(Cursor cursor, int offset) {
        PRICELEVEL entity = new PRICELEVEL( //
            cursor.isNull(offset + 0) ? null : cursor.getInt(offset + 0), // LEVEL
            cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1), // NAME
            cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2) // PRESETPRICE
        );
        return entity;
    }
     
    /** @inheritdoc */
    @Override
    public void readEntity(Cursor cursor, PRICELEVEL entity, int offset) {
        entity.setLEVEL(cursor.isNull(offset + 0) ? null : cursor.getInt(offset + 0));
        entity.setNAME(cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1));
        entity.setPRESETPRICE(cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2));
     }
    
    /** @inheritdoc */
    @Override
    protected Integer updateKeyAfterInsert(PRICELEVEL entity, long rowId) {
        return entity.getLEVEL();
    }
    
    /** @inheritdoc */
    @Override
    public Integer getKey(PRICELEVEL entity) {
        if(entity != null) {
            return entity.getLEVEL();
        } else {
            return null;
        }
    }

    /** @inheritdoc */
    @Override    
    protected boolean isEntityUpdateable() {
        return true;
    }
    
}
