package com.yutian.base.database.srcgen;

import android.database.Cursor;
import android.database.sqlite.SQLiteDatabase;
import android.database.sqlite.SQLiteStatement;

import de.greenrobot.dao.AbstractDao;
import de.greenrobot.dao.Property;
import de.greenrobot.dao.internal.DaoConfig;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table "SSQNUMBERWINNER".
*/
public class SSQNUMBERWINNERDao extends AbstractDao<SSQNUMBERWINNER, String> {

    public static final String TABLENAME = "SSQNUMBERWINNER";

    /**
     * Properties of entity SSQNUMBERWINNER.<br/>
     * Can be used for QueryBuilder and for referencing column names.
    */
    public static class Properties {
        public final static Property PERIOD = new Property(0, String.class, "PERIOD", true, "PERIOD");
        public final static Property PRICELEVEL = new Property(1, Integer.class, "PRICELEVEL", false, "PRICELEVEL");
        public final static Property PRICEVAL = new Property(2, String.class, "PRICEVAL", false, "PRICEVAL");
        public final static Property PRICENUM = new Property(3, String.class, "PRICENUM", false, "PRICENUM");
    };


    public SSQNUMBERWINNERDao(DaoConfig config) {
        super(config);
    }
    
    public SSQNUMBERWINNERDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(SQLiteDatabase db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "\"SSQNUMBERWINNER\" (" + //
                "\"PERIOD\" TEXT PRIMARY KEY NOT NULL ," + // 0: PERIOD
                "\"PRICELEVEL\" INTEGER," + // 1: PRICELEVEL
                "\"PRICEVAL\" TEXT," + // 2: PRICEVAL
                "\"PRICENUM\" TEXT);"); // 3: PRICENUM
    }

    /** Drops the underlying database table. */
    public static void dropTable(SQLiteDatabase db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"SSQNUMBERWINNER\"";
        db.execSQL(sql);
    }

    /** @inheritdoc */
    @Override
    protected void bindValues(SQLiteStatement stmt, SSQNUMBERWINNER entity) {
        stmt.clearBindings();
 
        String PERIOD = entity.getPERIOD();
        if (PERIOD != null) {
            stmt.bindString(1, PERIOD);
        }
 
        Integer PRICELEVEL = entity.getPRICELEVEL();
        if (PRICELEVEL != null) {
            stmt.bindLong(2, PRICELEVEL);
        }
 
        String PRICEVAL = entity.getPRICEVAL();
        if (PRICEVAL != null) {
            stmt.bindString(3, PRICEVAL);
        }
 
        String PRICENUM = entity.getPRICENUM();
        if (PRICENUM != null) {
            stmt.bindString(4, PRICENUM);
        }
    }

    /** @inheritdoc */
    @Override
    public String readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 0) ? null : cursor.getString(offset + 0);
    }    

    /** @inheritdoc */
    @Override
    public SSQNUMBERWINNER readEntity(Cursor cursor, int offset) {
        SSQNUMBERWINNER entity = new SSQNUMBERWINNER( //
            cursor.isNull(offset + 0) ? null : cursor.getString(offset + 0), // PERIOD
            cursor.isNull(offset + 1) ? null : cursor.getInt(offset + 1), // PRICELEVEL
            cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2), // PRICEVAL
            cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3) // PRICENUM
        );
        return entity;
    }
     
    /** @inheritdoc */
    @Override
    public void readEntity(Cursor cursor, SSQNUMBERWINNER entity, int offset) {
        entity.setPERIOD(cursor.isNull(offset + 0) ? null : cursor.getString(offset + 0));
        entity.setPRICELEVEL(cursor.isNull(offset + 1) ? null : cursor.getInt(offset + 1));
        entity.setPRICEVAL(cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2));
        entity.setPRICENUM(cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3));
     }
    
    /** @inheritdoc */
    @Override
    protected String updateKeyAfterInsert(SSQNUMBERWINNER entity, long rowId) {
        return entity.getPERIOD();
    }
    
    /** @inheritdoc */
    @Override
    public String getKey(SSQNUMBERWINNER entity) {
        if(entity != null) {
            return entity.getPERIOD();
        } else {
            return null;
        }
    }

    /** @inheritdoc */
    @Override    
    protected boolean isEntityUpdateable() {
        return true;
    }
    
}
