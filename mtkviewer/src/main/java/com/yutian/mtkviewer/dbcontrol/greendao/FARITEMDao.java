package com.yutian.mtkviewer.dbcontrol.greendao;

import android.database.Cursor;
import android.database.sqlite.SQLiteDatabase;
import android.database.sqlite.SQLiteStatement;

import de.greenrobot.dao.AbstractDao;
import de.greenrobot.dao.Property;
import de.greenrobot.dao.internal.DaoConfig;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table "FARITEM".
*/
public class FARITEMDao extends AbstractDao<FARITEM, Void> {

    public static final String TABLENAME = "FARITEM";

    /**
     * Properties of entity FARITEM.<br/>
     * Can be used for QueryBuilder and for referencing column names.
    */
    public static class Properties {
        public final static Property FAQID = new Property(0, String.class, "FAQID", false, "FAQID");
        public final static Property TITLE = new Property(1, String.class, "TITLE", false, "TITLE");
        public final static Property WHOLECONTENT = new Property(2, String.class, "WHOLECONTENT", false, "WHOLECONTENT");
        public final static Property MAINCONTENT = new Property(3, String.class, "MAINCONTENT", false, "MAINCONTENT");
        public final static Property MAINTEXT = new Property(4, String.class, "MAINTEXT", false, "MAINTEXT");
        public final static Property WHOLECONTENTIMG = new Property(5, byte[].class, "WHOLECONTENTIMG", false, "WHOLECONTENTIMG");
    };


    public FARITEMDao(DaoConfig config) {
        super(config);
    }
    
    public FARITEMDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(SQLiteDatabase db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "\"FARITEM\" (" + //
                "\"FAQID\" TEXT," + // 0: FAQID
                "\"TITLE\" TEXT," + // 1: TITLE
                "\"WHOLECONTENT\" TEXT," + // 2: WHOLECONTENT
                "\"MAINCONTENT\" TEXT," + // 3: MAINCONTENT
                "\"MAINTEXT\" TEXT," + // 4: MAINTEXT
                "\"WHOLECONTENTIMG\" BLOB);"); // 5: WHOLECONTENTIMG
    }

    /** Drops the underlying database table. */
    public static void dropTable(SQLiteDatabase db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"FARITEM\"";
        db.execSQL(sql);
    }

    /** @inheritdoc */
    @Override
    protected void bindValues(SQLiteStatement stmt, FARITEM entity) {
        stmt.clearBindings();
 
        String FAQID = entity.getFAQID();
        if (FAQID != null) {
            stmt.bindString(1, FAQID);
        }
 
        String TITLE = entity.getTITLE();
        if (TITLE != null) {
            stmt.bindString(2, TITLE);
        }
 
        String WHOLECONTENT = entity.getWHOLECONTENT();
        if (WHOLECONTENT != null) {
            stmt.bindString(3, WHOLECONTENT);
        }
 
        String MAINCONTENT = entity.getMAINCONTENT();
        if (MAINCONTENT != null) {
            stmt.bindString(4, MAINCONTENT);
        }
 
        String MAINTEXT = entity.getMAINTEXT();
        if (MAINTEXT != null) {
            stmt.bindString(5, MAINTEXT);
        }
 
        byte[] WHOLECONTENTIMG = entity.getWHOLECONTENTIMG();
        if (WHOLECONTENTIMG != null) {
            stmt.bindBlob(6, WHOLECONTENTIMG);
        }
    }

    /** @inheritdoc */
    @Override
    public Void readKey(Cursor cursor, int offset) {
        return null;
    }    

    /** @inheritdoc */
    @Override
    public FARITEM readEntity(Cursor cursor, int offset) {
        FARITEM entity = new FARITEM( //
            cursor.isNull(offset + 0) ? null : cursor.getString(offset + 0), // FAQID
            cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1), // TITLE
            cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2), // WHOLECONTENT
            cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3), // MAINCONTENT
            cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4), // MAINTEXT
            cursor.isNull(offset + 5) ? null : cursor.getBlob(offset + 5) // WHOLECONTENTIMG
        );
        return entity;
    }
     
    /** @inheritdoc */
    @Override
    public void readEntity(Cursor cursor, FARITEM entity, int offset) {
        entity.setFAQID(cursor.isNull(offset + 0) ? null : cursor.getString(offset + 0));
        entity.setTITLE(cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1));
        entity.setWHOLECONTENT(cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2));
        entity.setMAINCONTENT(cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3));
        entity.setMAINTEXT(cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4));
        entity.setWHOLECONTENTIMG(cursor.isNull(offset + 5) ? null : cursor.getBlob(offset + 5));
     }
    
    /** @inheritdoc */
    @Override
    protected Void updateKeyAfterInsert(FARITEM entity, long rowId) {
        // Unsupported or missing PK type
        return null;
    }
    
    /** @inheritdoc */
    @Override
    public Void getKey(FARITEM entity) {
        return null;
    }

    /** @inheritdoc */
    @Override    
    protected boolean isEntityUpdateable() {
        return true;
    }
    
}
